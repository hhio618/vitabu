apply plugin: 'com.android.application'
apply plugin: 'org.ajoberstar.grgit'
android {
    compileSdkVersion 32

    defaultConfig {
        applicationId "ai.elimu.vitabu"
        minSdkVersion 24
        targetSdkVersion 32
        versionCode 1001005
        versionName 'unspecified'
        setProperty("archivesBaseName", "${applicationId}-${versionCode}")
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            manifestPlaceholders = [contentProviderApplicationId: "ai.elimu.content_provider.debug"]
            buildConfigField("String", "CONTENT_PROVIDER_APPLICATION_ID", '"ai.elimu.content_provider.debug"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics.debug"')
        }
        qa_test {
            initWith debug
            applicationIdSuffix ".test"
            versionNameSuffix "-test"
            manifestPlaceholders = [contentProviderApplicationId: "ai.elimu.content_provider.test"]
            buildConfigField("String", "CONTENT_PROVIDER_APPLICATION_ID", '"ai.elimu.content_provider.test"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics.test"')
        }
        release {
            minifyEnabled false
            manifestPlaceholders = [contentProviderApplicationId: "ai.elimu.content_provider"]
            buildConfigField("String", "CONTENT_PROVIDER_APPLICATION_ID", '"ai.elimu.content_provider"')
            buildConfigField("String", "ANALYTICS_APPLICATION_ID", '"ai.elimu.analytics"')
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'com.github.elimu-ai:model:model-2.0.53' // See https://jitpack.io/#elimu-ai/model
    implementation 'com.github.elimu-ai:content-provider:1.2.10@aar' // See https://jitpack.io/#elimu-ai/content-provider
    implementation 'com.github.elimu-ai:analytics:3.1.11@aar' // See https://jitpack.io/#elimu-ai/analytics

    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'com.google.android:flexbox:2.0.1'

    testImplementation 'junit:junit:4.13.2'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}



task releaseClean {
    doLast {
        if (!grgit.repository.jgit.status().call().clean) {
            throw new GradleException('Git status is not clean, please commit or stash your changes!')
        }
    }
}

// Task parameters:
//    version -> if available will specify new versionName directly and ignores the `type` parameter.
//    type[major|minor|patch] -> will specify how the version bumping occurs.
task releasePrepare(dependsOn: releaseClean) {
    doLast {
        def versionCode = android.defaultConfig.versionCode
        def versionName = android.defaultConfig.versionName

        if (versionName.indexOf("-") > -1) {
            versionName = versionName.split("-")[0]
        }

        // Set new version name from input parameters.
        def newVersionName
        if (project.properties.containsKey("version")){
            newVersionName = project.properties["version"]
        }else if (project.properties.containsKey("type")) {
            def (major, minor, patch) = versionName.tokenize('.')
            switch (type) {
                case "major":
                    major = major.toInteger() + 1
                    minor = 0
                    patch = 0
                    break
                case "minor":
                    minor = minor.toInteger() + 1
                    break
                case "patch":
                    patch = patch.toInteger() + 1
                    break
            }
            newVersionName = "$major.$minor.$patch"
        }else{
            throw new GradleException('Either type or version parameters should be provided')
        }

        def newVersionCode = versionCode + 1
        println "Bumping versionName from $versionName to $newVersionName"
        println "Bumping versionCode from $versionCode to $newVersionCode"

        // Prepare the release commit with the specific tag.
        String buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$newVersionName'")
        buildText = buildText.replaceFirst(/versionCode(\s+.*)/, "versionCode $newVersionCode")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        grgit.commit(message: "[gradle-release-task] prepare release vitabu-$newVersionName")
        grgit.tag.add {
            name = newVersionName
            message = "Release of $newVersionName"
        }

        // Prepare for next development iteration.
        buildText = buildFile.getText()
        buildText = buildText.replaceFirst(/versionName(\s+.*)/, "versionName '$newVersionName-SNAPSHOT'")
        buildFile.setText(buildText) //replace the build file's text
        grgit.add(patterns: ['app/build.gradle'])
        grgit.commit(message: "[gradle-release-task] prepare for next development iteration")
    }
}

task performRelease(dependsOn: releaseClean) {
    doLast {
        grgit.push()
    }
}
